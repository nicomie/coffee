// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package sqlc

import (
	"context"
)

const createCoffee = `-- name: CreateCoffee :one
INSERT INTO coffees (
  name, flavor, acidity, image_src
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, flavor, acidity, image_src
`

type CreateCoffeeParams struct {
	Name     string `json:"name"`
	Flavor   string `json:"flavor"`
	Acidity  int16  `json:"acidity"`
	ImageSrc string `json:"image_src"`
}

func (q *Queries) CreateCoffee(ctx context.Context, arg CreateCoffeeParams) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, createCoffee,
		arg.Name,
		arg.Flavor,
		arg.Acidity,
		arg.ImageSrc,
	)
	var i Coffee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flavor,
		&i.Acidity,
		&i.ImageSrc,
	)
	return i, err
}

const deleteCoffee = `-- name: DeleteCoffee :exec
DELETE FROM coffees
WHERE id = $1
`

func (q *Queries) DeleteCoffee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoffee, id)
	return err
}

const getCoffee = `-- name: GetCoffee :one
SELECT id, name, flavor, acidity, image_src FROM coffees
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCoffee(ctx context.Context, id int64) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, getCoffee, id)
	var i Coffee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flavor,
		&i.Acidity,
		&i.ImageSrc,
	)
	return i, err
}

const listCoffees = `-- name: ListCoffees :many
SELECT id, name, flavor, acidity, image_src FROM coffees
ORDER BY name
`

func (q *Queries) ListCoffees(ctx context.Context) ([]Coffee, error) {
	rows, err := q.db.QueryContext(ctx, listCoffees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coffee{}
	for rows.Next() {
		var i Coffee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Flavor,
			&i.Acidity,
			&i.ImageSrc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoffee = `-- name: UpdateCoffee :one
UPDATE coffees
set name = $2,
flavor = $3,
acidity = $4,
image_src = $5
WHERE id = $1
RETURNING id, name, flavor, acidity, image_src
`

type UpdateCoffeeParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Flavor   string `json:"flavor"`
	Acidity  int16  `json:"acidity"`
	ImageSrc string `json:"image_src"`
}

func (q *Queries) UpdateCoffee(ctx context.Context, arg UpdateCoffeeParams) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, updateCoffee,
		arg.ID,
		arg.Name,
		arg.Flavor,
		arg.Acidity,
		arg.ImageSrc,
	)
	var i Coffee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flavor,
		&i.Acidity,
		&i.ImageSrc,
	)
	return i, err
}
